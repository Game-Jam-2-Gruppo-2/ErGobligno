//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Code/Scripts/CameraComponent_Scripts/CameraActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraActions"",
    ""maps"": [
        {
            ""name"": ""CameraMovement"",
            ""id"": ""89affca9-50f3-422d-98a6-c08bf77cd8c4"",
            ""actions"": [
                {
                    ""name"": ""Direction_X"",
                    ""type"": ""Value"",
                    ""id"": ""a3811df9-646b-4148-acc0-deb6680fe91b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Direction_Y"",
                    ""type"": ""Value"",
                    ""id"": ""708fbe6a-b0aa-4020-a42d-b69e4e0c046d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""583d05e4-a521-4d74-932d-d6a2e34402e9"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction_X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""629a4bdd-a010-487a-bce8-fc2233195fa1"",
                    ""path"": ""<Gamepad>/rightStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction_X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f527f10-4ce7-4739-89aa-2038f5c6c238"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction_Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cbc2614a-9d0a-4cca-8cd8-0c97b8aba558"",
                    ""path"": ""<Gamepad>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Direction_Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CameraMovement
        m_CameraMovement = asset.FindActionMap("CameraMovement", throwIfNotFound: true);
        m_CameraMovement_Direction_X = m_CameraMovement.FindAction("Direction_X", throwIfNotFound: true);
        m_CameraMovement_Direction_Y = m_CameraMovement.FindAction("Direction_Y", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CameraMovement
    private readonly InputActionMap m_CameraMovement;
    private List<ICameraMovementActions> m_CameraMovementActionsCallbackInterfaces = new List<ICameraMovementActions>();
    private readonly InputAction m_CameraMovement_Direction_X;
    private readonly InputAction m_CameraMovement_Direction_Y;
    public struct CameraMovementActions
    {
        private @CameraActions m_Wrapper;
        public CameraMovementActions(@CameraActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Direction_X => m_Wrapper.m_CameraMovement_Direction_X;
        public InputAction @Direction_Y => m_Wrapper.m_CameraMovement_Direction_Y;
        public InputActionMap Get() { return m_Wrapper.m_CameraMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraMovementActions set) { return set.Get(); }
        public void AddCallbacks(ICameraMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraMovementActionsCallbackInterfaces.Add(instance);
            @Direction_X.started += instance.OnDirection_X;
            @Direction_X.performed += instance.OnDirection_X;
            @Direction_X.canceled += instance.OnDirection_X;
            @Direction_Y.started += instance.OnDirection_Y;
            @Direction_Y.performed += instance.OnDirection_Y;
            @Direction_Y.canceled += instance.OnDirection_Y;
        }

        private void UnregisterCallbacks(ICameraMovementActions instance)
        {
            @Direction_X.started -= instance.OnDirection_X;
            @Direction_X.performed -= instance.OnDirection_X;
            @Direction_X.canceled -= instance.OnDirection_X;
            @Direction_Y.started -= instance.OnDirection_Y;
            @Direction_Y.performed -= instance.OnDirection_Y;
            @Direction_Y.canceled -= instance.OnDirection_Y;
        }

        public void RemoveCallbacks(ICameraMovementActions instance)
        {
            if (m_Wrapper.m_CameraMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraMovementActions @CameraMovement => new CameraMovementActions(this);
    public interface ICameraMovementActions
    {
        void OnDirection_X(InputAction.CallbackContext context);
        void OnDirection_Y(InputAction.CallbackContext context);
    }
}
